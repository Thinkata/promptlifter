name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Custom LLM Configuration (Primary - Local Models)
  CUSTOM_LLM_ENDPOINT: "http://localhost:11434"
  CUSTOM_LLM_MODEL: "llama3.1"
  CUSTOM_LLM_API_KEY: ""

  # LLM Provider Configuration
  LLM_PROVIDER: "custom"

  # Embedding Configuration
  EMBEDDING_PROVIDER: "custom"
  EMBEDDING_MODEL: "nomic-embed-text"

  # Commercial LLM Configuration (Fallback)
  OPENAI_API_KEY: "sk-test-openai-mock-key-123456789"
  ANTHROPIC_API_KEY: "sk-ant-test-anthropic-mock-key-123456789"
  GOOGLE_API_KEY: "sk-test-google-mock-key-123456789"

  # Search and Vector Configuration
  TAVILY_API_KEY: "tvly-test-tavily-mock-key-123456789"
  PINECONE_API_KEY: "test-pinecone-mock-key-123456789"
  PINECONE_INDEX: "test-index"
  PINECONE_NAMESPACE: "research"

  # Pinecone Search Configuration
  PINECONE_TOP_K: "10"
  PINECONE_SIMILARITY_THRESHOLD: "0.7"
  PINECONE_INCLUDE_SCORES: "true"
  PINECONE_FILTER_BY_SCORE: "true"

  # Conversation Context Configuration
  MAX_HISTORY_TOKENS: "4000"
  MAX_CONTEXT_TOKENS: "2000"
  ENABLE_AUTO_SEARCH: "true"
  SEARCH_RELEVANCE_THRESHOLD: "0.7"
  
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 promptlifter tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 promptlifter tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: black --check promptlifter tests
    
    - name: Type check with mypy
      run: mypy promptlifter --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=promptlifter --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r promptlifter/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/ 